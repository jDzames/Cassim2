package sk.upjs.ics.s.jdzama.Cassim2.GUI.dialogs;


import sk.upjs.ics.s.jdzama.Cassim2.GUI.tableModels.VariablesTableModel;
import sk.upjs.ics.s.jdzama.Cassim2.data.ValuesSingleton;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import org.apache.commons.math3.fraction.BigFraction;
import sk.upjs.ics.s.jdzama.Cassim2.data.DataParser;
import sk.upjs.ics.s.jdzama.Cassim2.GUI.other.InputTableCellEditor;
import sk.upjs.ics.s.jdzama.Cassim2.GUI.tableModels.InputTableModel;


public class InputTableDialog extends javax.swing.JDialog {

    InputTableModel inputTableModel = new InputTableModel();
    VariablesTableModel variablesTblModel = new VariablesTableModel();
    
    
    /**
     * Creates new form InputTableDialog
     */
    public InputTableDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setTitle("Zadávanie vstupu");
        
        setTables();
    }
    
    private void setTables(){         
        if (ValuesSingleton.INSTANCE.columns>6) { //6-pocet stlpcov ktore su este male ked sa nenatiahnu
            tblInput.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            tblVariables.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            tblVariables.setRowHeight(0, 19);
        } else {
            tblVariables.setRowHeight(0, 36);
        }
        
        tblInput.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        tblVariables.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        
        tblInput.getColumn(" ").setCellEditor(new InputTableCellEditor());
        tblInput.getColumn(" ").setCellRenderer(new DefaultTableCellRenderer());
        
        for (int i = 0; i < ValuesSingleton.INSTANCE.columnNames.length; i++) {
            tblInput.getColumn(ValuesSingleton.INSTANCE.columnNames[i]).setCellEditor(new InputTableCellEditor());
            tblInput.getColumn(ValuesSingleton.INSTANCE.columnNames[i]).setCellRenderer(new DefaultTableCellRenderer());
        }
        
        
    }
   

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblInput = new javax.swing.JTable();
        btnReadData = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        scrollPaneForTableVariables = new javax.swing.JScrollPane();
        tblVariables = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblInput.setModel(inputTableModel);
        tblInput.setRowHeight(25);
        tblInput.getTableHeader().setReorderingAllowed(false);
        tblInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblInputFocusGained(evt);
            }
        });
        tblInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblInputKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblInput);

        btnReadData.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnReadData.setText("Načítaj dáta");
        btnReadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadDataActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Ohraničenia:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Účelová funkcia -");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Nezápornosť -");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("- prvý riadok");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("- posledný riadok");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Názvy premenných:");

        tblVariables.setModel(variablesTblModel);
        tblVariables.getTableHeader().setReorderingAllowed(false);
        scrollPaneForTableVariables.setViewportView(tblVariables);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnReadData, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel3))))
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                            .addComponent(scrollPaneForTableVariables))))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrollPaneForTableVariables, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReadData)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(62, 62, 62))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadDataActionPerformed
       
        if (tblInput.isEditing())
            tblInput.getCellEditor().stopCellEditing();
        if (tblVariables.isEditing())
            tblVariables.getCellEditor().stopCellEditing();
        
        int a=-1;
        int b=-1;
        try {
            DataParser dataParser = new DataParser();
            ValuesSingleton.INSTANCE.rows=inputTableModel.getRowCount()-2;
            ValuesSingleton.INSTANCE.columns=inputTableModel.getColumnCount()-2+inputTableModel.getNeohrCount()+inputTableModel.getNerovnCount();
            ValuesSingleton.INSTANCE.tableData = new BigFraction[ValuesSingleton.INSTANCE.rows+1][ValuesSingleton.INSTANCE.columns+1];
            
            for (int i = 0; i < ValuesSingleton.INSTANCE.tableData.length; i++)
                for (int j = 0; j < ValuesSingleton.INSTANCE.tableData[i].length; j++)
                        ValuesSingleton.INSTANCE.tableData[i][j] = BigFraction.ZERO;

            int currCol = 0;
            boolean min = true;
            
            for ( int i = 0; i < inputTableModel.getColumnCount()-1; i++ ) {
                for ( int j = 0; j < inputTableModel.getRowCount()-1; j++ ) {
                    if ( i == 0 ) {
                        if ( j == 0 ) {
                            if ( inputTableModel.getDataAt(j, i).equalsIgnoreCase("max")) {
                                min = false;
                                ValuesSingleton.INSTANCE.tableData[j][currCol] = BigFraction.ZERO;
                            }
                        } else {
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = dataParser.parseString( inputTableModel.getDataAt(j, i));//dataParser.parseString((String)ValuesSingleton.INSTANCE.data[x][y]);            
                        }
                    } else if (inputTableModel.getNezap(i).equalsIgnoreCase("<>") ) {
                        if ( j == 0 && !min /*== false*/ ) {
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = dataParser.parseString(inputTableModel.getDataAt(j, i)).multiply(BigFraction.MINUS_ONE);
                            ValuesSingleton.INSTANCE.tableData[j][currCol+1] = dataParser.parseString(inputTableModel.getDataAt(j, i));
                        } else {
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = dataParser.parseString(inputTableModel.getDataAt(j, i));
                            ValuesSingleton.INSTANCE.tableData[j][currCol+1] = dataParser.parseString(inputTableModel.getDataAt(j, i)).multiply(BigFraction.MINUS_ONE);
                        }
                    } else {
                        if ( j == 0 && !min /*== false*/ )
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = dataParser.parseString(inputTableModel.getDataAt(j, i)).multiply(BigFraction.MINUS_ONE);
                        else
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = dataParser.parseString(((String) inputTableModel.getDataAt(j, i)).trim());
                    }
                } if (inputTableModel.getNezap(i).equalsIgnoreCase("<>"))
                    currCol = currCol + 2;
                else
                    currCol++;
            }    
            
            for (int i = 0; i < inputTableModel.getNerovnCount(); i++) {
                if (!inputTableModel.getPorovn(i+1).equalsIgnoreCase("=")) {
                    for (int j = 0; j < inputTableModel.getRowCount()-1; j++) {
                        if (j != i+1)
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = BigFraction.ZERO;
                        else if ( inputTableModel.getPorovn(i+1).equalsIgnoreCase("<=") )
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = BigFraction.ONE;
                        else
                            ValuesSingleton.INSTANCE.tableData[j][currCol] = BigFraction.MINUS_ONE;
                    }
                    currCol++;
                }
            }
            
            for (int i = 0; i < ValuesSingleton.INSTANCE.tableData.length; i++)
                for (int j = 0; j < ValuesSingleton.INSTANCE.tableData[i].length; j++)
                    if (ValuesSingleton.INSTANCE.tableData[i][j].getDenominatorAsInt() == 0)
                        ValuesSingleton.INSTANCE.tableData[i][j] = BigFraction.ZERO;

            String[] colNames = new String[inputTableModel.getNezapCount()+inputTableModel.getNeohrCount()+inputTableModel.getNerovnCount()+1];
            int actPos = 0;
            for (int i = 0; i <= inputTableModel.getNezapCount(); i++) {
                if (inputTableModel.getNezap(i).equalsIgnoreCase("<>")) {
                    colNames[actPos] = inputTableModel.getColumnName2(i)+"_+";
                    colNames[actPos+1] = inputTableModel.getColumnName2(i)+"_-";
                    actPos = actPos+2;
                } else {
                    colNames[actPos] = inputTableModel.getColumnName2(i);
                    actPos++;
                }
            }
            int slack = 1;
            int surplus = 1;
            for (int i = 1; i <= inputTableModel.getPorovnCount(); i++) {
                if (inputTableModel.getPorovn(i).equals("<=")) {
                    colNames[actPos] = "r_"+slack;
                    slack++;
                    actPos++;
                } else if (inputTableModel.getPorovn(i).equals(">=")) {
                    colNames[actPos] = "s_"+surplus;
                    surplus++;
                    actPos++;
                }
            }
            ValuesSingleton.INSTANCE.columnNamesSaved = ValuesSingleton.INSTANCE.columnNames;
            ValuesSingleton.INSTANCE.columnNames = colNames;

            ValuesSingleton.INSTANCE.isOK=true;
            this.dispose();
            
        } catch (NumberFormatException e) {
            System.out.println("chyba u: "+a+"  "+b);
            JOptionPane.showMessageDialog(this, "Nesprávne zadané alebo chýbajúce vstupné údaje. Dokončite alebo opravte, potom pokračujte.", "Chyba", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnReadDataActionPerformed

    private void tblInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblInputFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_tblInputFocusGained

    private void tblInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblInputKeyReleased
        int row = tblInput.getSelectedRow();
        int column = tblInput.getSelectedColumn();
        boolean arrowReleased = false;
        switch(evt.getKeyCode()){
            case KeyEvent.VK_LEFT: arrowReleased = true;
                break;
            case KeyEvent.VK_RIGHT: arrowReleased = true;
                break;    
            case KeyEvent.VK_UP: arrowReleased = true;
                break;
            case KeyEvent.VK_DOWN: arrowReleased = true;
                break;    
        }
        
        if (arrowReleased) {  // && tblInput.getCellEditor(row, column).getTableCellEditorComponent(tblInput, tblInput.getCellEditor(row, column).getCellEditorValue(), true, row, column) instanceof JTextField
            //tblInput.changeSelection(row, column, false, false);
            //JTextField textField = (JTextField)(tblInput.getCellEditor(row, column).getTableCellEditorComponent(tblInput, tblInput.getCellEditor(row, column).getCellEditorValue(), true, row, column));
            tblInput.editCellAt(row, column);
        }    
    }//GEN-LAST:event_tblInputKeyReleased


    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReadData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane scrollPaneForTableVariables;
    private javax.swing.JTable tblInput;
    private javax.swing.JTable tblVariables;
    // End of variables declaration//GEN-END:variables

}


