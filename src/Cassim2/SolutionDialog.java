package Cassim2;

import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.table.TableColumn;


public class SolutionDialog extends javax.swing.JDialog {

    private ImageTableModel imageTableModel = new ImageTableModel();
    private BasisTableModel basisTableModel = new BasisTableModel();
    private SolutionCalcService solutionCalculations = new SolutionCalcService();
    private int pocetPomPremennych;
    private boolean isBased;
    
    /**
     * Creates new form SolutionDialog
     */
    public SolutionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.options = new String[]{"Áno", "Nie"};
        int[] pole = new int[ValuesSingleton.INSTANCE.rows];
        for (int i = 0; i < pole.length; i++) {
            pole[i]=-1;          
        }
        ValuesSingleton.INSTANCE.basisDataIdx = pole;
        this.pocetPomPremennych=ValuesSingleton.INSTANCE.suppRoleVariables;
        /*solutionCalculations.findBasis();   ak by sme to chceli robit automaticky     */
                
        initComponents();
        this.isBased=false;
        btnKoniecPomUlohy.setVisible((this.pocetPomPremennych!=0));
        tblSolution.setDefaultRenderer(JLabel.class, new ImageRenderer()); 
        if (ValuesSingleton.INSTANCE.columnNames.length>6) { //6-pocet stlpcov ktore su este male ked sa nenatiahnu
            tblSolution.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSolution = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBaza = new javax.swing.JTable();
        btnKoniecPomUlohy = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemLoad = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuSolveAs = new javax.swing.JMenu();
        jMenuItemRevided = new javax.swing.JMenuItem();
        jMenuItemGomory = new javax.swing.JMenuItem();
        jMenuItemPomocnaUloha = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemFindBasis = new javax.swing.JMenuItem();
        jMenuItemPivot = new javax.swing.JMenuItem();
        jMenuItemMin = new javax.swing.JMenuItem();
        jMenuItemMax = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblSolution.setModel(imageTableModel);
        tblSolution.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(tblSolution);
        tblSolution.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("v báze: ");

        tblBaza.setModel(basisTableModel);
        tblBaza.setFocusable(false);
        tblBaza.setRowHeight(38);
        tblBaza.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(tblBaza);

        btnKoniecPomUlohy.setText("Ukončiť pomocnú úlohu");
        btnKoniecPomUlohy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKoniecPomUlohyActionPerformed(evt);
            }
        });

        jMenuFile.setText("Úloha");

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setText("Uložiť");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemLoad.setText("Otvoriť");
        jMenuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemLoad);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItemExit.setText("Ukončiť");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuSolveAs.setText("Tabuľka");

        jMenuItemRevided.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemRevided.setText("Revidovaná úloa");
        jMenuSolveAs.add(jMenuItemRevided);

        jMenuItemGomory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemGomory.setText("Gomoryho rez");
        jMenuItemGomory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGomoryActionPerformed(evt);
            }
        });
        jMenuSolveAs.add(jMenuItemGomory);

        jMenuItemPomocnaUloha.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPomocnaUloha.setText("Riešiť pomocnú úlohu");
        jMenuItemPomocnaUloha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPomocnaUlohaActionPerformed(evt);
            }
        });
        jMenuSolveAs.add(jMenuItemPomocnaUloha);

        jMenuBar.add(jMenuSolveAs);

        jMenuEdit.setText("Prepočty");

        jMenuItemFindBasis.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, 0));
        jMenuItemFindBasis.setText("Bázuj");
        jMenuItemFindBasis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFindBasisActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemFindBasis);

        jMenuItemPivot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        jMenuItemPivot.setText("Pivotuj");
        jMenuItemPivot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPivotActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemPivot);

        jMenuItemMin.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, 0));
        jMenuItemMin.setText("Minimum");
        jMenuItemMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMinActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemMin);

        jMenuItemMax.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        jMenuItemMax.setText("Maximum");
        jMenuItemMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMaxActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemMax);

        jMenuBar.add(jMenuEdit);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnKoniecPomUlohy)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                        .addGap(41, 41, 41))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btnKoniecPomUlohy)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)))
                .addGap(85, 85, 85))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        System.out.println("Daco");
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemFindBasisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFindBasisActionPerformed
        solutionCalculations.findBasis();
        //tblSolution.repaint();
        //tblBaza.repaint();
        this.isBased=true;
        imageTableModel.fireTableDataChanged();
        basisTableModel.fireTableDataChanged();
    }//GEN-LAST:event_jMenuItemFindBasisActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItemLoadActionPerformed

    private void jMenuItemGomoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGomoryActionPerformed
        if (!solutionCalculations.isBased()) {
            JOptionPane.showMessageDialog(this, "Tabuľka musí byť najprv bázovaná!", "Chyba", JOptionPane.ERROR_MESSAGE);
            return;            
        }  //ci napr po pom ulohe dal bazovat a vynuloval nad bazou
        
        int checkedGomory = solutionCalculations.checkGomory(tblSolution.getSelectedRow(), tblSolution.getSelectedColumn());
        //tu zisti ci napr mame bazu
        
        switch(checkedGomory){
            case -1: JOptionPane.showMessageDialog(this, "Ste v neprípustnom riešení!", "Riešenie", JOptionPane.PLAIN_MESSAGE);
                    return;
            case -2: JOptionPane.showMessageDialog(this, "Najprv musí mať tabuľka bázu!", "Chyba", JOptionPane.ERROR_MESSAGE);
                    return;
            case -3: JOptionPane.showMessageDialog(this, "Nemá zmysel použit Gomoryo rez na tomto riadku!", "Nevhodné použitie", JOptionPane.PLAIN_MESSAGE);
                    return;    
            case -4: int potvrdenie = JOptionPane.showOptionDialog(this, "Lineárna optimalizácia ešte nie je ukončena. Naozaj chcete teraz použiť Gomoryho rez?",
                    "Varovanie", 0, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
                    if (potvrdenie != JOptionPane.YES_OPTION) {
                        return;
                    }
            default: ValuesSingleton.INSTANCE.doGomory(tblSolution.getSelectedRow());
                    imageTableModel = new ImageTableModel();
                    tblSolution.setModel(imageTableModel);
                    basisTableModel = new BasisTableModel();
                    tblBaza.setModel(basisTableModel);
        }
    }//GEN-LAST:event_jMenuItemGomoryActionPerformed

    private void jMenuItemMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMinActionPerformed
        int checkedMin = solutionCalculations.checkMin(tblSolution.getSelectedRow(), tblSolution.getSelectedColumn());

        switch(checkedMin){
            case -4: JOptionPane.showMessageDialog(this, "Vyberte bunku kde je možné pivotovať!", "Chyba", JOptionPane.ERROR_MESSAGE);
                    return;
            case -3: JOptionPane.showMessageDialog(this, "Ste v neprípustnom riešení!", "Riešenie", JOptionPane.PLAIN_MESSAGE);
                    return;
            case -1: int potvrdenie = JOptionPane.showOptionDialog(this, "Hľadanie minima v tomto stĺpci nezodpovedá Simplexovej metóde. Naozaj chcete pokračovať?",
                    "Varovanie", 0, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
                    if (potvrdenie != JOptionPane.YES_OPTION) {
                        return;
                    }
            default: int focusRow = solutionCalculations.minimum(tblSolution.getSelectedRow(), tblSolution.getSelectedColumn());
                    if (focusRow==-2 && ValuesSingleton.INSTANCE.tableData[0][tblSolution.getSelectedColumn()].getNumerator()<0) {
                        JOptionPane.showMessageDialog(this, "Úloha je neohraničená!", "Riešenie", JOptionPane.PLAIN_MESSAGE);
                        return;
                    }
                    if (focusRow>0 && focusRow<= ValuesSingleton.INSTANCE.rows) {
                        tblSolution.changeSelection(focusRow, tblSolution.getSelectedColumn(), false, false);
                     } else {
                        JOptionPane.showMessageDialog(this, "Chybový stav!", "Chyba", JOptionPane.ERROR_MESSAGE);
                     }
        }

    }//GEN-LAST:event_jMenuItemMinActionPerformed

    private void jMenuItemMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMaxActionPerformed
        int checkMax = solutionCalculations.checkMax(tblSolution.getSelectedRow(), tblSolution.getSelectedColumn());

        switch(checkMax){
            case -4: JOptionPane.showMessageDialog(this, "Vyberte bunku kde je možné pivotovať!", "Chyba", JOptionPane.ERROR_MESSAGE);
                    return; 
            case -3: JOptionPane.showMessageDialog(this, "Ste v neprípustnom riešení duálu!", "Riešenie", JOptionPane.PLAIN_MESSAGE);
                    return;
            case -2: 
            case -1: int potvrdenie = JOptionPane.showOptionDialog(this, "Hľadanie maxima v tomto riadku nezodpovedá Simplexovej metóde. Naozaj chcete pokračovať?",
                    "Varovanie", 0, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
                    if (potvrdenie != JOptionPane.YES_OPTION) {
                        return;
                    }
            default: int focusColumn = solutionCalculations.maximum(tblSolution.getSelectedRow(), tblSolution.getSelectedColumn());
                    if (focusColumn==-2 && ValuesSingleton.INSTANCE.tableData[tblSolution.getSelectedRow()][0].getNumerator()<0) {
                        JOptionPane.showMessageDialog(this, "Duálna úloha je neohraničená!", "Riešenie", JOptionPane.PLAIN_MESSAGE);
                        return;
                    }
                    if (focusColumn>0 && focusColumn<= ValuesSingleton.INSTANCE.columns) {
                        tblSolution.changeSelection(tblSolution.getSelectedRow(), focusColumn, false, false);
                     } else {
                        JOptionPane.showMessageDialog(this, "Chybový stav!", "Chyba", JOptionPane.ERROR_MESSAGE);
                     }
        }

    }//GEN-LAST:event_jMenuItemMaxActionPerformed

    private void jMenuItemPivotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPivotActionPerformed
        if (!solutionCalculations.isBased()) {
            JOptionPane.showMessageDialog(this, "Tabuľka musí byť najprv bázovaná!", "Chyba", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        int checkPivot = solutionCalculations.checkPivot(tblSolution.getSelectedRow(), tblSolution.getSelectedColumn());
        switch(checkPivot){
            case -1: JOptionPane.showMessageDialog(this, "Vyberte riadok/stĺpec kde je možné pivotovať!", "Chyba", JOptionPane.ERROR_MESSAGE);
                return;
            case -2: JOptionPane.showMessageDialog(this, "Nie je možné pivotovať na 0.", "Chyba", JOptionPane.ERROR_MESSAGE);
                return;
            case -3: JOptionPane.showMessageDialog(this, "Ste v neprípustnom riešení!", "Riešenie", JOptionPane.PLAIN_MESSAGE);
                return;
            case -4: int potvrdenie = JOptionPane.showOptionDialog(this,"Daná operácia nezodpovedá Simplexovej metóde (v 0. riadku/stĺpci nie je záporné číslo). Naozaj chcete pokračovať?", "Varonanie",
                    0, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
                if (potvrdenie != JOptionPane.YES_OPTION) {
                    return;
                } 
            case -5: int potvrdenie2 = JOptionPane.showOptionDialog(this,"Daná operácia nezodpovedá Simplexovej metóde (v tejto bunke nie je minimum/maximum). Naozaj chcete pokračovať?", "Varonanie",
                    0, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
                if (potvrdenie2 != JOptionPane.YES_OPTION) {
                    return;
                } 
            default: //pivotuj
                solutionCalculations.pivot(tblSolution.getSelectedRow(), tblSolution.getSelectedColumn());                   
                imageTableModel.fireTableDataChanged();
                basisTableModel.fireTableDataChanged();
        }
        
        
    }//GEN-LAST:event_jMenuItemPivotActionPerformed

    private void jMenuItemPomocnaUlohaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPomocnaUlohaActionPerformed
        if (!this.isBased) {
            JOptionPane.showMessageDialog(this, "Tabuľka musí byť najprv bázovaná", "Pomocná úloha", JOptionPane.PLAIN_MESSAGE);
            return;
        }       
        
        pocetPomPremennych = 0;
        for (int i = 0; i < ValuesSingleton.INSTANCE.basisDataIdx.length; i++) {
            if (ValuesSingleton.INSTANCE.basisDataIdx[i]<0) {
                pocetPomPremennych++;
            }
        }
        if (pocetPomPremennych==0) {
            JOptionPane.showMessageDialog(this, "Pomocná úloha nie je potrebná", "Pomocná úloha", JOptionPane.PLAIN_MESSAGE);
            return;
        }
      
        ValuesSingleton.INSTANCE.startSuppRole(pocetPomPremennych);  
        /*for (int i = 0; i < pocetPomPremennych; i++) {
            tblSolution.addColumn(new TableColumn());
        }   */     
        this.isBased=false;
        imageTableModel = new ImageTableModel();
        tblSolution.setModel(imageTableModel);
        btnKoniecPomUlohy.setVisible(true);
    }//GEN-LAST:event_jMenuItemPomocnaUlohaActionPerformed

    private void btnKoniecPomUlohyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKoniecPomUlohyActionPerformed
        //este skoncenie - 1.spravne podmienky a 2. ked nespravne ta savedTableData nahodit
        if (solutionCalculations.rightEndOfSuppRole(pocetPomPremennych)) {
            
            ValuesSingleton.INSTANCE.endOfSuppRoleOpt(pocetPomPremennych);
            
            this.isBased=false;
            imageTableModel = new ImageTableModel();
            tblSolution.setModel(imageTableModel);
            btnKoniecPomUlohy.setVisible(false);
        } else{
            this.isBased=false;
            int potvrdenie = JOptionPane.showOptionDialog(this,"Daná tabuľka nezodpovedá optimálnej tabuľke na ukončenie pomocnej úlohy. Naozaj chcete pokračovať? (Budete vrátení do stavu pred pomocnou úlohou.)", "Varonanie",
                    0, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
            if (potvrdenie != JOptionPane.YES_OPTION) {
                return;
            }
            ValuesSingleton.INSTANCE.endOfSuppRoleNotOpt(pocetPomPremennych);
            
            imageTableModel = new ImageTableModel();
            tblSolution.setModel(imageTableModel);
            btnKoniecPomUlohy.setVisible(false);
        }
        
    }//GEN-LAST:event_btnKoniecPomUlohyActionPerformed

    private final String[] options;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKoniecPomUlohy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemFindBasis;
    private javax.swing.JMenuItem jMenuItemGomory;
    private javax.swing.JMenuItem jMenuItemLoad;
    private javax.swing.JMenuItem jMenuItemMax;
    private javax.swing.JMenuItem jMenuItemMin;
    private javax.swing.JMenuItem jMenuItemPivot;
    private javax.swing.JMenuItem jMenuItemPomocnaUloha;
    private javax.swing.JMenuItem jMenuItemRevided;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenu jMenuSolveAs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblBaza;
    private javax.swing.JTable tblSolution;
    // End of variables declaration//GEN-END:variables
}
